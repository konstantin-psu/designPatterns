<HTML>
<HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="Author" CONTENT="Mark Grand">
   <META NAME="GENERATOR" CONTENT="Mozilla/4.05 [en] (Win95; I) [Netscape]">
   <META NAME="Description" CONTENT="Synopses of enterprise software patterns from the upcoming book Patterns in Java Volume 3: A Catalog of Reusable Design Patterns for Distributed and Enterprise Applications by Mark Grand Illustrated with UML">
   <META NAME="KeyWords" CONTENT="Pattern, Design Patterns">
   <TITLE>Enterprise Software Pattern Synopses</TITLE>
</HEAD>
<BODY>

<CENTER>
<H1>
<A NAME="top"></A><B>Preview of Patterns in Java Volume 3</B></H1></CENTER>
This page contains the outline I currently have planned for volume 3 of
Patterns in Java. The intended focus is design patterns for the enterprise.
As I write the patterns, the table below will contain hyperlinks to the
synopses of the patterns I have written. As a work in progress, <B>this
outline is subject to change</B>.

<P>If you have any comments or suggestions, please send mail to&nbsp; <A HREF="mailto:mgrand@mindspring.com">mgrand@mindspring.com</A>
. Synopsis of the <A HREF="pattern_synopses.htm#Top of Page">design patterns
in volume 1</A> and the <A HREF="pattern_synopses2.htm#top">patterns in
volume 2</A> are available on a separate page.
<BR>&nbsp;
<BR>&nbsp;
<CENTER><TABLE BORDER=3 COLS=2 WIDTH="80%" >
<TR>
<TD VALIGN=CENTER WIDTH="35%"><A HREF="#Transaction Patterns">Transaction
Patterns</A></TD>

<TD><A HREF="#ACID Transaction">ACID Transaction</A>&nbsp;
<BR><A HREF="#Audit Trail">Audit Trail</A>&nbsp;
<BR><A HREF="#Composite Transaction">Composite Transaction</A>&nbsp;
<BR><A HREF="#Two Phase Commit">Two Phase Commit</A></TD>
</TR>

<TR>
<TD><A HREF="#Distributed Architecture Patterns">Distributed Architecture
Patterns</A></TD>

<TD><A HREF="#Broker">Object Request Broker</A>&nbsp;
<BR><A HREF="#Demilitarized Zone">Demilitarized Zone</A>&nbsp;
<BR><A HREF="#High Availability">High Availability</A>&nbsp;
<BR><A HREF="#Mobile Agent">Mobile Agent&nbsp;</A>&nbsp;
<BR><A HREF="#Object Replication">Object Replication</A>&nbsp;
<BR><A HREF="#Process Pair">Process Pair</A>&nbsp;
<BR><A HREF="#Shared Object">Shared Object</A>&nbsp;</TD>
</TR>

<TR>
<TD><A HREF="#Distributed Computing Patterns">Distributed Computing Patterns</A></TD>

<TD><A HREF="#Connection Multiplexing">Connection Multiplexing</A>&nbsp;
<BR><A HREF="#Heartbeat">Heartbeat&nbsp;</A>&nbsp;
<BR><A HREF="#Heavyweight/Lightweight Object">Heavyweight/Lightweight Object</A>&nbsp;
<BR><A HREF="#Mailbox">Mailbox</A>&nbsp;
<BR><A HREF="#Object Identifier">Object Identifier</A>&nbsp;
<BR><A HREF="#Protection Proxy">Protection Proxy</A>&nbsp;
<BR><A HREF="#Publish-Subscribe">Publish-Subscribe</A>&nbsp;
<BR><A HREF="#Registry">Registry</A></TD>
</TR>

<TR>
<TD><A HREF="#Distributed Concurrency Patterns">Concurrency Patterns</A></TD>

<TD><A HREF="#Session Object">Session Object</A>&nbsp;
<BR>Data Lock&nbsp;
<BR>Lock File&nbsp;
<BR>Optimistic Concurrency&nbsp;
<BR>Client-Dispatcher-Server&nbsp;
<BR>Master-Slave&nbsp;
<BR>Thread Pool&nbsp;
<BR>Read/Write Consistency&nbsp;
<BR>Cache Consistency&nbsp;
<BR>Shallow Transaction Nesting&nbsp;
<BR>Deep Transaction Nesting</TD>
</TR>

<TR>
<TD><A HREF="#Temporal Patterns">Temporal Patterns</A></TD>

<TD>13 Temporal Relationships&nbsp;
<BR>Time Server&nbsp;
<BR>Versioned Object&nbsp;
<BR>Effective Dates</TD>
</TR>

<TR>
<TD><A HREF="#Database Patterns">Database Patterns</A></TD>

<TD>Persistence Layer&nbsp;
<BR>CRUD&nbsp;
<BR>SQL Code Description&nbsp;
<BR>Attribute Mapping Methods&nbsp;
<BR>Type Conversion&nbsp;
<BR>Change Manager&nbsp;
<BR>Object ID Manager&nbsp;
<BR>Transaction Manager&nbsp;
<BR>Connection Manager&nbsp;
<BR>Table Manager&nbsp;
<BR>Database Authenticates Program&nbsp;
<BR>Represent Relational Database Tables as Objects&nbsp;
<BR>Represent Objects as Relational Database Tables</TD>
</TR>
</TABLE></CENTER>
&nbsp;
<H2>
<A NAME="Transaction Patterns"></A>Transaction Patterns</H2>

<UL>
<LI>
<A NAME="ACID Transaction"></A><B>ACID Transaction</B></LI>

<BR>Ensure that a transaction will never have any unexpected or inconsistent
outcome. You do that by ensuring that the transaction has the ACID properties:
atomicity, consistency, isolation and durability.

<P>Related patterns are
<UL>
<LI>
<A HREF="pattern_synopses.htm#Snapshot">Snapshot</A></LI>

<BR>The Snapshot pattern describes techniques for saving and restoring
the state of objects. This is the better way to recover from a transaction
failure when a transaction involves a long sequence of operations that
modify the state of a small number of simple objects.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Command">Command</A></LI>

<BR>The command pattern describes techniques for remembering and undoing
a sequence of operations. This is the better way to recover from a transaction
failure when a transaction involves a short sequence of operations that
modify the state of a large number of complex objects.
<BR>&nbsp;
<LI>
<A HREF="#Audit Trail">Audit Trail</A></LI>

<BR>Logging a sequence of operations to support the Command Pattern is
structurally similar to maintaining an audit trail.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses2.htm#System Testing">System Testing</A></LI>

<BR>The System Testing pattern should be used to ensure the consistency
of transactions.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses2.htm#Unit Testing">Unit Testing</A></LI>

<BR>The Unit Testing pattern may also help to ensure the consistency of
transactions.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Single Threaded Execution">Single Threaded
Execution</A></LI>

<BR>The Single Threaded Execution Pattern can be used to keep transactions
that modify the state of the same object isolated from each other, so that
the modifications each transaction makes to the object’s state do not interfere
with each other.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Read/Write Lock">Read/Write Lock</A></LI>

<BR>The Read/Write Lock pattern can be used to keep transactions that use
the same object isolated from each other while allowing transactions that
do not modify the object’s state to execute concurrently.
<BR>&nbsp;
<LI>
<A HREF="#Read/Write Consistency">Read/Write Consistency</A></LI>

<BR>If you directly manage the storage of persistent distributed objects,
you may need the Read/Write Consistency pattern to ensure that data and
objects that are read from files are consistent wit the most recent write
operation.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Proxy">Copy on Write Proxy</A></LI>

<BR>The Copy on Write Proxy pattern can be used to help ensured the isolation
property of transactions. The Copy on Write Proxy is described as part
of the write-up of the Proxy pattern in Volume 1.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses2.htm#Copy Mutable Parameters">Copy Mutable Parameters</A></LI>

<BR>The Copy Mutable Parameters pattern can be used to help ensure the
isoplation property of transactions.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses2.htm#Return New Objects from Accessor Method">Return
New Objects from Accessor Method</A></LI>

<BR>The Return New Objects from Accessor Method pattern (described in Volume
2) can be used to help ensure the isolation property of transactions.

<P>Return Mutable Objects from Accessor Method
<BR>The Return Mutable Objects from Accessor Method (described in Volume
2) can be used to help ensure the isolation property of transactions.
<BR>&nbsp;
<LI>
<A HREF="#Cache Consistency">Cache Consistency</A></LI>

<BR>If you directly manage the storage of persistent distributed objects,
you may need the Cache Consistency pattern to ensure that the result of
a locally initiated read operation matches the current contents of a remote
store.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Decorator">Decorator</A></LI>

<BR>If an object that does not support access controls such as single threaded
execution or read/write lock must participate in an ACID transaction, the
object’s deficiency can be compensated for by making the TransactionManager
access the object through a decorator object.
<BR>&nbsp;</UL>

<LI>
<A NAME="Composite Transaction"></A><B>Composite Transaction</B></LI>

<BR>You want to design and implement transactions correctly and with a
minimum of effort. Simple transactions are easier to implement and make
correct than complex transactions. Design and implement complex transactions
from simpler ACID transactions.

<P>Related patterns are
<UL>
<LI>
<A HREF="#ACID Transaction">ACID Transaction</A></LI>

<BR>The Composite Transaction pattern is built on the ACID transaction
pattern.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Command">Command</A></LI>

<BR>The Command Pattern can be the basis for an undo mechanism used to
undo operations and restore object to the state they were in at the beginning
of a transaction.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses2.htm#Composed Method">Composed Method</A></LI>

<BR>&nbsp;The Composed Method pattern is a coding pattern that describes
a way of composing methods from other methods that is structurally similar
to the way the Composite Transaction pattern composes transactions.
<BR>&nbsp;
<LI>
<A HREF="#Lock File">Lock File</A></LI>

<BR>&nbsp;The Lock File pattern can be used to enforce the isolation property
for a composite transaction.</UL>
</UL>

<UL>
<UL>
<LI>
<A HREF="#Two Phase Commit">Two Phase Commit</A></LI>

<BR>The Two Phase Commit pattern can be used to ensure the ACID properties
of a composite transaction composed from simpler ACID transactions.
<BR>&nbsp;
<LI>
<A HREF="#Mailbox">Mailbox</A></LI>

<BR>When there is a need to ensure the reliability a composite transaction,
you will want to take steps to ensure the reliability of the component
transactions that constitute it. If the composite transaction is distributed,
you will also want to ensure the reliable transmission of messages between
the objects that participate in the transaction by such means as the Mailbox
pattern.
<BR>&nbsp;</UL>

<LI>
&nbsp;<A NAME="Two Phase Commit"></A><B>Two Phase Commit</B></LI>

<BR>If a transaction is composed of simpler transactions, you want them
to either all complete successfully or to all abort, leaving all objects
as they were before the transactions. You achieve this by making an object
responsible for coordinating the transactions so that they all complete
successfully or all abort.

<P>Related patterns are
<UL>
<LI>
<A HREF="#ACID Transaction">ACID Transaction</A></LI>

<BR>The Two Phase Commit pattern is used to build composite transactions
having the ACID properties from component transactions that have the ACID
properties.
<BR>&nbsp;
<LI>
<A HREF="#Composite Transaction">Composite Transaction</A></LI>

<BR>The Two Phase Commit pattern is used with the Composite Transaction
pattern
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Decorator">Decorator</A></LI>

<BR>The Decorator pattern provides the basis for the organization of the
wrapper objects used in the Two Phase Commit pattern.
<BR>&nbsp;
<LI>
<A HREF="#Heartbeat">Heartbeat</A></LI>

<BR>The Heartbeat pattern may be used with the Two Phase Commit pattern
to ensure that the Coordinator object is able to detect catastrophic failures
of component transactions in a bounded amount of time.
<BR>&nbsp;</UL>
<A NAME="Audit Trail"></A><B>Audit Trail</B>
<BR>You need to verify that transactions are being processed correctly
and honestly. Maintain an historical record of transactions that have been
applied to an object or set of objects. The record should contain enough
detail to determine how the objects affected by the transactions reached
their current state.

<P>Related patterns are
<UL>
<LI>
<A HREF="#ACID Transaction">ACID Transaction</A></LI>

<BR>If the transactions in an historical record do not have the ACID properties,
then it may not be possible to unambiguously determine the effect of each
transaction on an object.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Snapshot">Snapshot</A></LI>

<BR>The Snapshot pattern provides advice on how to capture the state of
an object.</UL>
</UL>

<H2>
<A NAME="Distributed Architecture Patterns"></A>Distributed Architecture
Patterns</H2>

<UL><A NAME="Shared Object"></A><B>Shared Object</B>
<BR>You have some information or a limited quantity of a resource. You
Sshare objects among multiple clients to facilitate sharing of encapsulated
information or underlying resources. You organize the sharing so that it
does not add to the complexity of the objects being shared or the objects
sharing them.
<BR>&nbsp;
<BR>Related patterns are
<UL TYPE=CIRCLE>
<LI>
<A HREF="#Object Replication">Object Replication</A></LI>

<BR>The Object Replication pattern provides a different way for the clients
of an object to share information.
<BR>&nbsp;
<LI>
<A HREF="#Broker">Object Request Broker</A></LI>

<BR>The Object Request Broker pattern can be used to allow objects to be
shared by remote clients.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Singleton">Singleton</A></LI>

<BR>The Singleton pattern describes classes that have a single instance
that may or may not be shared. The Shared Object pattern describes objects
that are shared and may have multiple instances.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Flyweight">Flyweight</A></LI>

<BR>The Flywieght pattern describes a way that objects with no intrinsic
state can be shared by local clients.
<BR>&nbsp;</UL>
<A NAME="Broker"></A><B>Object Request Broker</B>
<BR>Objects in a distributed environment need to call methods of remote
objects. Provide an infrastructure that allows objects in a distributed
environment to call each other’s methods, receive the results of those
calls or exceptions thrown from those calls. The infrastructure allows
remote calls to be made through an interface, with most of the details
of the call handled automatically by the infrastructure.

<P>Related patterns are
<UL TYPE=CIRCLE>
<LI>
<A HREF="#Object Identifier">Object Identifier</A></LI>

<BR>The Object Identifier pattern provides additional guidance on uniquely
identifying possibly remote objects.
<BR>&nbsp;
<LI>
<A HREF="#Heartbeat">Heartbeat Pattern</A></LI>

<BR>The Heartbeat pattern provides a general purpose way to detect when
the caller of a remote method will never see the call complete because
the machine that the remote call runs on has crashed or the network connection
to the remote machine has been lost.
<BR>&nbsp;
<LI>
<A HREF="#Registry">Registry</A></LI>

<BR>The Registry pattern describes a way for an Object Request Broker implementation
to find remote objects that have a know name or unique object identifier.
<BR>&nbsp;
<LI>
<A HREF="#Thread Pool">Thread Pool</A></LI>

<BR>CallDispatcher objects need a thread to process each remote call. An
implementation of the Object Request Broker pattern can use the Thread
Pool pattern to recycle threads and avoid the expense of creating new threads.</UL>

<LI>
<A NAME="Object Replication"></A><B>Object Replication</B></LI>

<BR>You need to improve the throughput or availability of a distributed
computation. A distributed computation is a computation that involves objects
that reside on multiple computing elements and are able to communicate
with each other. In some circumstances, it is possible to improve the availability
and throughput of a computation by replicating an object onto multiple
computing elements while maintaining the illusion to the object’s clients
of there only being a single object.

<P>Related patterns are
<UL TYPE=CIRCLE>
<LI>
<A HREF="#High Availability">High Availability</A></LI>

<BR>The High Availability pattern is a more specialized pattern that describes
the use of replication to make objects highly available.
<BR>&nbsp;
<LI>
<A HREF="#Data Lock">Data Lock</A></LI>

<BR>The Data Lock pattern describes techniques that can be used to lock
replicas of an object.
<BR>&nbsp;
<LI>
<A HREF="#Optimistic Concurrency">Optimistic Concurrency</A></LI>

<BR>The Optimistic Concurrency pattern describes how to update data without
the use of locks.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Immutable">Immutable</A></LI>

<BR>The Immutable pattern explains the simplicity and safety that comes
from designing objects to be immutable.
<BR>&nbsp;
<LI>
<A HREF="#Broker">Object Request Broker</A></LI>

<BR>The Object Request Broker pattern allows an object to be used in multiple
places at the same time without it being in multiple places or replicated.

<P>&nbsp;</UL>

<LI>
<A NAME="High Availability"></A><B>High Availability</B></LI>

<BR>You need to Eensure the high availability of an object. You can accomplish
this through by using redundancy redundant and failfast components along
with theand promptly repairing of failures.

<P>Related patterns are
<UL>
<LI>
<A HREF="#Object Replication">Object Replication</A></LI>

<BR>The High Availability pattern is a specialized version of the Object
Replication pattern.
<BR>&nbsp;
<LI>
<A HREF="#Process Pair">Process Pair</A></LI>

<BR>The Process Pair pattern can be used to ensure that software components
are restarted when they fail.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Snapshot">Snapshot</A></LI>

<BR>The Snapshot pattern can be used to implement checkpoint/restart
<BR>&nbsp;</UL>

<LI>
<A NAME="Mobile Agent"></A><B>Mobile Agent</B></LI>

<BR>An object needs to access very large volume of remote data. To conserve
network bandwidth, Instead instead of bringing data to an object, move
the object to the data.
<BR>&nbsp;
<BR>Related patterns are:
<UL>
<LI>
<A HREF="#Broker">Object Request Broker</A></LI>

<BR>The Object Request Broker pattern is usually used with the Mobile Agent
pattern to facilitate communications between mobile agents and other objects.
Mobile agents can be implemented on top of the Object Request Broker pattern.
<BR>&nbsp;
<LI>
<A HREF="#Object Replication">Object Replication</A></LI>

<BR>One of the applications of the Object Replication pattern is to ensure
that an object is near its accessors. The Mobile Agent pattern provides
a way for an object’s accessors to be near the object.
<BR>&nbsp;
<BR>&nbsp;</UL>

<LI>
<A NAME="Demilitarized Zone"></A><B>Demilitarized Zone</B></LI>

<BR>You don’t want hackers to be able to gain access to servers containing
sensitive information if they are able to compromise the security of a
publicly accessible server. Put servers that are accessible to the public
Internet on a publicly accessible LAN that connects with bothbetween your
private networkfirewall and the public Internet.

<P>Related pattern are
<UL>
<LI>
<A HREF="#Protection Proxy">Protection Proxy</A></LI>

<BR>The Protection Proxy pattern, at the object level, is structurally
similar to the Demilitarized Zone pattern at the network level.</UL>
&nbsp;
<LI>
<A NAME="Process Pair"></A><B>Process Pair</B></LI>

<BR>To keep a process or software component highly available, you want
it to be automatically restarted if it fails. Organize highly available
software components in pairs, so that if one fails the other restarts it.

<P>Related pattern are
<UL>
<LI>
<A HREF="#Heartbeat">Heartbeat</A></LI>

<BR>The Process Pair pattern uses the Heartbeat pattern.</UL>
</UL>

<H2>
<A NAME="Distributed Computing Patterns"></A>Distributed Computing Patterns</H2>

<UL>
<LI>
<A NAME="Object Identifier"></A><B>Object Identifier</B></LI>

<BR>You need to uniquely identify an object that exists in multiple environments.
Assign a globally unique identifier to the object, allowing it to have
a unique identity when it is shared between programs or databases.

<P>Related patterns are
<UL>
<LI>
<A HREF="#Broker">Objecct Request Broker</A> and <A HREF="#Registry">Registry</A></LI>

<BR>You can use the Object Request Broker pattern with the Registry pattern
to encapsulate an implmentation of the Object Identifier pattern and minimize
the number of classes that are dependent on it.
<BR>&nbsp;
<LI>
<A HREF="#Mobile Agent">Mobile Agent</A></LI>

<BR>The Mobile Agent pattern uses the Object ID pattern.
<BR>&nbsp;
<LI>
<A HREF="#Object Replication">Object Replication</A></LI>

<BR>The Object Replication pattern uses the Object ID pattern.</UL>
&nbsp;
<LI>
<A NAME="Registry"></A><B>Registry</B></LI>

<BR>Objects need to contact another object, knowing only the object’s name
or the name of the service it provides, but not its object identifier.
An object identifier is sufficient information to allow objects to contact
the identified object. Provide a service that takes the name of an object,
service or role and returns a corresponding object identifier.

<P>Related patterns are
<UL>
<LI>
<A HREF="#Object Identifier">Object Identifier</A></LI>

<BR>The Registry pattern uses the Object Identifier pattern.
<BR>&nbsp;
<LI>
<A HREF="#Broker">Object Request Broker</A></LI>

<BR>The Registry pattern is often used the Object Request Broker pattern.
<BR>&nbsp;
<LI>
<A HREF="#Shared Object">Shared Object</A></LI>

<BR>Registry objects are shared objects.</UL>
&nbsp;
<LI>
<A NAME="Protection Proxy"></A><B>Protection Proxy</B></LI>

<BR>Malicious objects may attempt to violate the integrity of other objects
by using reflection or other means to access methods or variables they
should not. You can prevent this by requiring other objects to access sensitive
objects through a proxy that limits access based on security considerations.
The proxy implements measures to ensure that other objects do not gain
access to features of a sensitive object that they are not entitled to.

<P>Related patterns are
<UL>
<LI>
<A HREF="pattern_synopses.htm#Proxy">Proxy</A></LI>

<BR>The Protection Proxy pattern is a specialized version of the Proxy
pattern.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Template">Template Method</A></LI>

<BR>The Protection Proxy pattern uses the Template Method pattern to abstract
out the reusable portion of the thread management logic.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Template">Thread Pool</A></LI>

<BR>You can use the Thread Pool pattern with the Protection Proxy pattern
to create a multi-threaded proxy.</UL>
&nbsp;
<LI>
<A NAME="Publish-Subscribe"></A><B>Publish-Subscribe</B></LI>

<BR>You need to provide reliable delivery of messages to objects. Deliver
messages to subscribed recipient objects by transmitting each message to
each recipient. Ensure reliable delivery by repeating the transmission
after an attempt fails until delivery is successful.

<P>Related patterns are:
<UL>
<LI>
<A HREF="#Broker">Object Request Broker</A></LI>

<BR>The Publish-Subscribe pattern is often used with the Object Reqest
Broker pattern to deliver messages to remote objects.
<BR>&nbsp;
<LI>
<A HREF="#Mailbox">Mailbox</A></LI>

<BR>The Mailbox pattern provides an alternate solution for the reliable
delivery of messages.
<BR>&nbsp;
<LI>
<A HREF="#High Availability">High Availability</A></LI>

<BR>You can use the High Availability pattern to minimize the likelihood
that the Publisher object will crash or become otherwise unavailable.
<BR>&nbsp;
<LI>
<A HREF="#Object Replication">Object Replication</A></LI>

<BR>In order for message delivery to be as reliable as possible the Publisher
object must be highly available. The Object Replication pattern describes
a way to make the Publisher object highly available.
<BR>&nbsp;
<LI>
<A HREF="#Process Pair">Process Pair</A></LI>

<BR>The Process Pair pattern describes a way to ensure that a Publisher
object is automatically restarted after a crash.
<BR>&nbsp;
<LI>
<A HREF="#Registry">Registry</A></LI>

<BR>The registry pattern provides a way for Subscriber objects to find
Publisher objects.
<BR>&nbsp;
<LI>
<A HREF="#Remote Proxy">Remote Proxy</A></LI>

<BR>Publisher objects and Subscriber objects communicate with each other
through remote proxies.</UL>
&nbsp;
<LI>
<A NAME="Mailbox"></A><B>Mailbox</B></LI>

<BR>You need to provide reliable delivery of messages to objects. Facilitate
the delivery of messages by storing messages for later retrieval by each
recipient.
<BR>&nbsp;
<BR>Related patterns are:
<UL>
<LI>
<A HREF="#Publish-Subscribe">Publish-Subscribe</A></LI>

<BR>The Publish-Subscribe pattern provides an alternate solution for the
reliable delivery of messages.
<BR>&nbsp;
<LI>
<A HREF="#High Availability">High Availability</A></LI>

<BR>The High Availability pattern can be used to ensure that a MailboxServer
is highly available.
<BR>&nbsp;
<LI>
<A HREF="#Broker">Objecg Request Broker</A></LI>

<BR>The Mailbox pattern is often used with the Object Request Broker pattern
to deliver messages to remote objects.
<BR>&nbsp;
<LI>
<A HREF="#Process Pair">Process Pair</A></LI>

<BR>The Process Pair pattern describes a way to ensure that a MailboxServer
object is automatically restarted after a crash.
<BR>&nbsp;
<LI>
<A HREF="#Registry">Registry</A></LI>

<BR>The registry pattern provides a way for Subscriber objects to find
MailboxServer objects.
<BR>&nbsp;</UL>
</UL>

<UL>
<LI>
<A NAME="Heavyweight/Lightweight Object"></A><B>Heavyweight/Lightweight
Object</B></LI>

<BR>You are designing an application client that should be as small and
thin as possible. The client must access some objects that have many attributes
and/or attributes that are large objects. The client does not always need
the attributes, so you arrange for the client to download the objects without
the attributes and then lazily download the attributes on an as needed
basis.

<P>Related Patterns are:
<UL>
<LI>
<A HREF="#Broker">Object Request Broker</A></LI>

<BR>The Heavyweight/Lightweight pattern is usually implemented using the
Object Request Broker to facilitate communication between the client and
the server.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses2.htm#Lazy Initialization">Lazy Initialization</A></LI>

<BR>The lazy Initialization pattern can be used to manage the download
of Data objects if client objects are responsible for the download of their
own Data object.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Virtual Proxy">Virtual Proxy</A></LI>

<BR>The Virtual Proxy pattern should be used to manage the download of
Data objects if the same class is used to implement the client and server
version of the shared object.
<BR>&nbsp;
<LI>
<A HREF="#Object Replication">Object Replication</A></LI>

<BR>The Object Replication pattern addresses issues related to keeping
the state of the client and server objects consistent.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Facade">Facade</A></LI>

<BR>Like a fa&ccedil;ade object, a lightweight object hides the details
of accessing objects behind it.</UL>
</UL>

<UL>
<LI>
<A NAME="Heartbeat"></A><B>Heartbeat</B></LI>

<BR>While a remote object is performing an operation on behalf of a client,
periodically send a message back to the client indicating that the remote
object is still alive.

<P>Related patterns are:
<UL>
<LI>
<A HREF="#Broker">Object Request Broker</A></LI>

<BR>The Heartbeat pattern is used with the Object Request Broker pattern.
<BR>&nbsp;
<LI>
<A HREF="#Connection Multiplexing">Connection Multiplexing</A></LI>

<BR>Whether or not the ORB being used with the Heartbeat pattern implements
the Connection Multiplexing pattern can determine how you choose to implement
the Heartbeat pattern.
<BR>&nbsp;</UL>

<LI>
<A NAME="Connection Multiplexing"></A><B>Connection Multiplexing</B></LI>

<BR>You are designing a distributed system in which one object may establish
many connections with another object. To avoid the overhead of setting
up and shutting down many connections between the same two objects, you
arrange for one actual connection to carry the contents of multiple virtual
connections.

<P>Related patterns are
<UL>
<LI>
<A HREF="pattern_synopses.htm#Object Pool">Object Pool</A></LI>

<BR>The Connection Multiplexing pattern uses the Object Pool pattern to
manage data buffers.
<BR>&nbsp;
<LI>
<A HREF="#Object Identifier">Object Identifier</A></LI>

<BR>The ConnectionID objects used by the Connection Multiplexing pattern
are an application of the Object Identifier pattern.
<BR>&nbsp;
<LI>
<A HREF="pattern_synopses.htm#Scheduler">Scheduler</A></LI>

<BR>The Scheduler pattern can be used to ensure that all virtual connections
get their fair share of the actual connection’s bandwidth. The Scheduling
pattern describes how to enforce a policy that determines when a thread
is scheduled to use a resource.</UL>
&nbsp;</UL>

<H2>
&nbsp;<A NAME="Distributed Concurrency Patterns"></A>Concurrency Patterns</H2>

<UL>
<LI>
<A NAME="Session Object"></A><B>Session Object</B></LI>

<BR>A server’s sessions with clients have state information associated
with them, but you don’t want to duplicate a lot of objects for each session.
Use a single object to contain all the state information needed during
a session by the server and make that object accessible to all other objects
that need state information for the current session.

<P>Reelated patterns are
<UL>
<LI>
<A HREF="pattern_synopses.htm#Singleton">Singleton</A></LI>

<BR>The Singleton pattern (described in Volume 1) uses a single instance
of a class for an entire program. The Session pattern uses a single instance
of a class per session.
<BR>&nbsp;
<LI>
<A HREF="#Thread Pool">Thread Pool</A></LI>

<BR>You can use the Thread Pool pattern to manage the association between
threads and sessions over time.</UL>
&nbsp;
<LI>
<A NAME="Data Lock"></A><B>Data Lock</B></LI>

<BR>&nbsp;
<LI>
<A NAME="Lock File"></A><B>Lock File</B></LI>

<BR>&nbsp;
<LI>
<A NAME="Optimistic Concurrency"></A><B>Optimistic Concurrency</B></LI>

<BR>&nbsp;
<LI>
<A NAME="Thread Pool"></A><B>Thread Pool</B></LI>

<BR>&nbsp;
<LI>
<A NAME="Cache Consistency"></A><B>Cache Consistency</B></LI>

<BR>&nbsp;
<LI>
<A NAME="Read/Write Consistency"></A><B>Read/Write Consistency</B></LI>
</UL>

<H2>
<A NAME="Temporal Patterns"></A>Temporal Patterns</H2>

<H2>
<A NAME="Database Patterns"></A>Database Patterns</H2>

<HR WIDTH="100%">If you have any suggestions about this page or would like
to discuss a pattern with its author, send e-mail to&nbsp; <A HREF="mailto:mgrand@mindspring.com">mgrand@mindspring.com</A>
.

<P><A HREF="index.html">Return to Mark Grand's home page.</A>
</BODY>
</HTML>
